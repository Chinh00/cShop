version: "3.9"

services:
  #####################################
  #           Catalog service         #
  #####################################
  catalogservice:
    image: chinhval/cshopcatalogservice
    container_name: catalogservice
    restart: always
    environment:
      ConnectionStrings__Db: ${ConnectionStrings__Db:-Server=sqlserver;Database=Db;Encrypt=false;User Id=sa;Password=@P@ssw0rd02}
      Kafka__BootstrapServers: broker1:9092,broker2:9093,broker3:9094
      SchemaRegistry__Url: ${SchemaRegistry__Url:-http://schema-registry}
      ASPNETCORE_Kestrel__Endpoints__Https__Url: https://+:443
      ASPNETCORE_Kestrel__Endpoints__Https__Protocols: Http2
      ASPNETCORE_Kestrel__Endpoints__Http__Url: http://+:80
      ASPNETCORE_Kestrel__Endpoints__Http__Protocols: Http1
      ASPNETCORE_Kestrel__Certificates__Default__Path: /https.pfx
      ASPNETCORE_Kestrel__Certificates__Default__Password: "@P@ssw0rd02"
      Jaeger__Protocol: http
      Jaeger__Host: jaeger
      Jaeger__Port: 4317
      Oltp__Endpoint: http://otel-collector:4321
      Consul__Address: http://consul:8500
      Consul__ServiceName: catalog-service
      Consul__ServiceAddress: http://catalogservice:7009
      
    ports:
      - "7009:80"
      - "7001:443"
    volumes:
      - ./certs/https.pfx:/https.pfx
    depends_on:
      - broker1
      - broker2
      - broker3
      - schema-registry
      - mongodb
      - sqlserver
      - consul
    networks:
      cshop-network:
  #####################################
  #           Basket service         #
  #####################################
  basketservice:
    container_name: basketservice
    restart: always
    ports:
      - "7002:80"
    depends_on:
      - redis
      - broker1
      - broker2
      - broker3
    image: chinhval/cshopbasketservice
    environment:
      IdentityServer__Url: http://identityservice
      Kafka__BootstrapServers: broker1:9092,broker2:9093,broker3:9094
      SchemaRegistry__Url: ${SchemaRegistry__Url:-http://schema-registry:8085}
      CatalogGrpc__Url: https://catalogservice
      Redis__Server: redis
      Redis__Port: 6379
      Cert__Path: /https.pfx
      Cert__Password: "@P@ssw0rd02"
      Jaeger__Protocol: http
      Jaeger__Host: jaeger
      Jaeger__Port: 4317
      Oltp__Endpoint: http://otel-collector:4321
    volumes:
      - ./certs/https.pfx:/https.pfx
    networks:
      cshop-network:
  
  #####################################
  #           Order service           #
  ##################################### 
  orderservice:
    restart: always
    ports:
      - "7003:80"
    image: chinhval/cshoporderservice
    environment:
      Kafka__BootstrapServers: broker1:9092,broker2:9093,broker3:9094
      Kafka__SchemaRegistryServer: ${SchemaRegistry__Url:-http://schema-registry:8085}
      SchemaRegistry__Url: ${SchemaRegistry__Url:-http://schema-registry}
      ConnectionStrings__Db: ${ConnectionStrings__Db:-Server=sqlserver,1434;Database=Db;Encrypt=false;User Id=sa;Password=@P@ssw0rd02}
      MongoDb__Username: root
      MongoDb__Password: "%40P%40ssw0rd02"
      MongoDb__DatabaseName: orderdb
      MongoDb__CollectionName: ordercollection
      MongoDb__ServerName: mongodb
      Jaeger__Protocol: http
      Jaeger__Host: jaeger
      Jaeger__Port: 4317
      Oltp__Endpoint: http://otel-collector:4321
    depends_on:
      - mongodb
      - broker1
      - broker2
      - broker3
      - schema-registry
    networks:
      cshop-network:
  #####################################
  #           User service            #
  #####################################
  userservice:
    restart: always
    container_name: userservice
    ports:
      - "7004:80"
    image: chinhval/cshopuserservice
    environment:
      Kafka__BootstrapServers: broker1:9092,broker2:9093,broker3:9094
      Kafka__SchemaRegistryServer: ${SchemaRegistry__Url:-http://schema-registry:8085}
      ConnectionStrings__Db: ${ConnectionStrings__Db:-Server=sqlserver,1434;Database=Db;Encrypt=false;User Id=sa;Password=@P@ssw0rd02}
      Jaeger__Protocol: http
      Jaeger__Host: jaeger
      Jaeger__Port: 4317
      Oltp__Endpoint: http://otel-collector:4321
    depends_on:
      - mongodb
      - broker1
      - broker2
      - broker3
      - schema-registry
    networks:
      cshop-network:
  #####################################
  #         Notification service      #
  #####################################
  notificationservice:
    container_name: notificationservice
    restart: always
    ports:
      - "7005:80"
    image: chinhval/cshopnotificationservice
    environment:
      Kafka__BootstrapServers: broker1:9092,broker2:9093,broker3:9094
      Kafka__SchemaRegistryServer: ${SchemaRegistry__Url:-http://schema-registry:8085}
      ConnectionStrings__Db: ${ConnectionStrings__Db:-Server=sqlserver,1434;Database=Db;Encrypt=false;User Id=sa;Password=@P@ssw0rd02}
      Jaeger__Protocol: http
      Jaeger__Host: jaeger
      Jaeger__Port: 4317
      Oltp__Endpoint: http://otel-collector:4321
    depends_on:
      - mongodb
      - broker1
      - broker2
      - broker3
      - schema-registry
    networks:
      cshop-network:
  #####################################
  #           Shipping service        #
  #####################################
  shippingservice:
    restart: always
    container_name: shippingservice
    ports:
      - "7006:80"
    image: chinhval/cshopshippingservice
    environment:
      Kafka__BootstrapServers: broker1:9092,broker2:9093,broker3:9094
      Kafka__SchemaRegistryServer: ${SchemaRegistry__Url:-http://schema-registry:8085}
      SchemaRegistry__Url: ${SchemaRegistry__Url:-http://schema-registry}
      ConnectionStrings__Db: ${ConnectionStrings__Db:-Server=sqlserver,1434;Database=Db;Encrypt=false;User Id=sa;Password=@P@ssw0rd02}
      MongoDb__Username: root
      MongoDb__Password: "%40P%40ssw0rd02"
      MongoDb__DatabaseName: orderdb
      MongoDb__CollectionName: ordercollection
      MongoDb__ServerName: mongodb
      Jaeger__Protocol: http
      Jaeger__Host: jaeger
      Jaeger__Port: 4317
      Oltp__Endpoint: http://otel-collector:4321
    depends_on:
      - mongodb
      - broker1
      - broker2
      - broker3
      - schema-registry
    networks:
      cshop-network:
  #####################################
  #           Identity service        #
  #####################################
  identityservice:
    restart: always
    container_name: identityservice
    ports:
      - "7007:80"
    image: chinhval/cshopidentityservice
    environment:
      Kafka__BootstrapServers: broker1:9092,broker2:9093,broker3:9094
      Kafka__SchemaRegistryServer: ${SchemaRegistry__Url:-http://schema-registry:8085}
      ConnectionStrings__Db: ${ConnectionStrings__Db:-Server=sqlserver,1434;Database=Db;Encrypt=false;User Id=sa;Password=@P@ssw0rd02}
      SchemaRegistry__Url: ${SchemaRegistry__Url:-http://schema-registry:8085}
      Nextjs__Domain: https://c-shop-woad.vercel.app/
      Identity__IssuerUri: identityservice:5001
      Jaeger__Protocol: http
      Jaeger__Host: jaeger
      Jaeger__Port: 4317
      Oltp__Endpoint: http://otel-collector:4321
      Google__ClientId: 
      Google__ClientSecret: 
    depends_on:
      - sqlserver
      - broker1
      - broker2
      - broker3
      - schema-registry
    networks:
      cshop-network:
  
  
  #####################################
  #           Payment service         #
  #####################################
  
  paymentservice:
    container_name: paymentservice
    restart: always
    ports:
      - "7008:80"
    image: chinhval/cshoppaymentservice
    environment:
      Kafka__BootstrapServers: broker1:9092,broker2:9093,broker3:9094
      Kafka__SchemaRegistryServer: ${SchemaRegistry__Url:-http://schema-registry:8085}
      ConnectionStrings__Db: ${ConnectionStrings__Db:-Server=sqlserver,1434;Database=Db;Encrypt=false;User Id=sa;Password=@P@ssw0rd02}
      SchemaRegistry__Url: ${SchemaRegistry__Url:-http://schema-registry:8085}
      Vnpay__vnp_Version: "2.1.0"
      Vnpay__vnp_TmnCode: "48FVW9FU"
      Vnpay__vnp_HashSecret: "89TAQZ7WFK1BTART5KR5XVFXNGUJTC2M"
      Vnpay__vnpay_url: "https://sandbox.vnpayment.vn/paymentv2/vpcpay.html"
      Vnpay__vnp_ReturnUrl: "https://c-shop-woad.vercel.app/myorders"
      Jaeger__Protocol: http
      Jaeger__Host: jaeger
      Jaeger__Port: 4317
      Oltp__Endpoint: http://otel-collector:4321
    depends_on:
      - mongodb
      - broker1
      - broker2
      - broker3
      - schema-registry
    networks:
      cshop-network:
  
  #####################################
  #           Comment service         #
  #####################################

  commentservice:
    container_name: commentservice
    restart: always
    ports:
      - "8008:80"
    image: chinhval/cshopcommentservice
    environment:
      Kafka__BootstrapServers: broker1:9092,broker2:9093,broker3:9094
      Kafka__SchemaRegistryServer: ${SchemaRegistry__Url:-http://schema-registry:8085}
      ConnectionStrings__Db: ${ConnectionStrings__Db:-Server=sqlserver,1434;Database=Db;Encrypt=false;User Id=sa;Password=@P@ssw0rd02}
      SchemaRegistry__Url: ${SchemaRegistry__Url:-http://schema-registry:8085}
      Jaeger__Protocol: http
      Jaeger__Host: jaeger
      Jaeger__Port: 4317
      Oltp__Endpoint: http://otel-collector:4321
      MongoDb__Username: root
      MongoDb__Password: "%40P%40ssw0rd02"
      MongoDb__DatabaseName: commentdb
      MongoDb__CollectionName: ordercollection
      MongoDb__ServerName: mongodb
    depends_on:
      - mongodb
      - broker1
      - broker2
      - broker3
      - schema-registry
    networks:
      cshop-network:
  
  #####################################
  #           Search service          #
  #####################################

  searchservice:
    container_name: searchservice
    restart: always
    ports:
      - "8009:80"
    image: chinhval/cshopsearchservice
    environment:
      Kafka__BootstrapServers: broker1:9092,broker2:9093,broker3:9094
      Kafka__SchemaRegistryServer: ${SchemaRegistry__Url:-http://schema-registry:8085}
      Elastic__ConnectionString: http://elasticsearch:9200
      SchemaRegistry__Url: ${SchemaRegistry__Url:-http://schema-registry:8085}
      Jaeger__Protocol: http
      Jaeger__Host: jaeger
      Jaeger__Port: 4317
      Oltp__Endpoint: http://otel-collector:4321
    depends_on:
      - mongodb
      - broker1
      - broker2
      - broker3
      - schema-registry
    networks:
      cshop-network:
  
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.4.0
    container_name: elasticsearch
    restart: always
    environment:
      - xpack.security.enabled=false
      - discovery.type=single-node
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    cap_add:
      - IPC_LOCK
    volumes:
      - data_elasticsearch:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      cshop-network:
  kibana:
    container_name: kibana
    image: docker.elastic.co/kibana/kibana:7.4.0
    restart: always
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      cshop-network:
  
  
  #####################################
  #           Gateway service         #
  #####################################
  gatewayservice:
    restart: always
    ports:
      - "11111:80"
    image: chinhval/cshopgatewayservice
    environment:
      #      Basket service
      ReverseProxy__Routes__basketservice__ClusterId: basketservice
      ReverseProxy__Routes__basketservice__Match__Path: /basketservice/{**catch-all}
      ReverseProxy__Routes__basketservice__Transforms_0__PathRemovePrefix: /catalogservice
      ReverseProxy__Routes__basketservice__Transforms_1__PathPrefix: /
      
      #      Catalog service
      ReverseProxy__Routes__catalogservice__ClusterId: catalogservice
      ReverseProxy__Routes__catalogservice__Match__Path: /catalogservice/{**catch-all}
      ReverseProxy__Routes__catalogservice__Transforms_0__PathRemovePrefix: /catalogservice
      ReverseProxy__Routes__catalogservice__Transforms_1__PathPrefix: /
      
      #      Identity service
      ReverseProxy__Routes__identityservice__ClusterId: identityservice
      ReverseProxy__Routes__identityservice__Match__Path: /identityservice/{**catch-all}
      ReverseProxy__Routes__identityservice__Transforms_0__PathRemovePrefix: /identityservice
      ReverseProxy__Routes__identityservice__Transforms_1__PathPrefix: /
      
      #      Notification service
      ReverseProxy__Routes__notificationservice__ClusterId: notificationservice
      ReverseProxy__Routes__notificationservice__Match__Path: /notificationservice/{**catch-all}
      ReverseProxy__Routes__notificationservice__Transforms_0__PathRemovePrefix: /notificationservice
      ReverseProxy__Routes__notificationservice__Transforms_1__PathPrefix: /
      
      #      Order service  
      ReverseProxy__Routes__orderservice__ClusterId: orderservice
      ReverseProxy__Routes__orderservice__Match__Path: /orderservice/{**catch-all}
      ReverseProxy__Routes__orderservice__Transforms_0__PathRemovePrefix: /orderservice
      ReverseProxy__Routes__orderservice__Transforms_1__PathPrefix: /
      
      #      Payment service
      ReverseProxy__Routes__paymentservice__ClusterId: paymentservice
      ReverseProxy__Routes__paymentservice__Match__Path: /paymentservice/{**catch-all}
      ReverseProxy__Routes__paymentservice__Transforms_0__PathRemovePrefix: /paymentservice
      ReverseProxy__Routes__paymentservice__Transforms_1__PathPrefix: /
      
      #      Shipping service
      ReverseProxy__Routes__shippingservice__ClusterId: shippingservice
      ReverseProxy__Routes__shippingservice__Match__Path: /shippingservice/{**catch-all}
      ReverseProxy__Routes__shippingservice__Transforms_0__PathRemovePrefix: /shippingservice
      ReverseProxy__Routes__shippingservice__Transforms_1__PathPrefix: /
      
      #      User service
      ReverseProxy__Routes__userservice__ClusterId: userservice
      ReverseProxy__Routes__userservice__Match__Path: /userservice/{**catch-all}
      ReverseProxy__Routes__userservice__Transforms_0__PathRemovePrefix: /userservice
      ReverseProxy__Routes__userservice__Transforms_1__PathPrefix: /
      
      #      Connector
      ReverseProxy__Routes__connector__ClusterId: connector
      ReverseProxy__Routes__connector__Match__Path: /connector/{**catch-all}
      ReverseProxy__Routes__connector__Transforms_0__PathRemovePrefix: /connector
      ReverseProxy__Routes__connector__Transforms_1__PathPrefix: /
      
      #      Comment service
      ReverseProxy__Routes__commentservice__ClusterId: commentservice
      ReverseProxy__Routes__commentservice__Match__Path: /commentservice/{**catch-all}
      ReverseProxy__Routes__commentservice__Transforms_0__PathRemovePrefix: /commentservice
      ReverseProxy__Routes__commentservice__Transforms_1__PathPrefix: /
      #      Search service
      ReverseProxy__Routes__searchservice__ClusterId: searchservice
      ReverseProxy__Routes__searchservice__Match__Path: /searchservice/{**catch-all}
      ReverseProxy__Routes__searchservice__Transforms_0__PathRemovePrefix: /searchservice
      ReverseProxy__Routes__searchservice__Transforms_1__PathPrefix: /
      #      Connector
      ReverseProxy__Routes__signalr-route__ClusterId: commentservice
      ReverseProxy__Routes__signalr-route__Match__Path: /hubs/{**catch-all}
      ReverseProxy__Routes__signalr-route__Transforms_0__RequestHeader: Connection
      ReverseProxy__Routes__signalr-route__Transforms_0__Set: Upgrade
      ReverseProxy__Routes__signalr-route__Transforms_1__RequestHeader: Upgrade
      ReverseProxy__Routes__signalr-route__Transforms_1__Set: websocket
      
      
      #      Cluster ip
      ReverseProxy__Clusters__basketservice__ClusterId: basketservice
      ReverseProxy__Clusters__basketservice__Destinations__destination1__Address: http://basketservice
      
      ReverseProxy__Clusters__catalogservice__ClusterId: catalogservice
      ReverseProxy__Clusters__catalogservice__Destinations__destination1__Address: http://catalogservice
      
      ReverseProxy__Clusters__identityservice__ClusterId: identityservice
      ReverseProxy__Clusters__identityservice__Destinations__destination1__Address: http://identityservice
      
      ReverseProxy__Clusters__notificationservice__ClusterId: notificationservice
      ReverseProxy__Clusters__notificationservice__Destinations__destination1__Address: http://notificationservice
      
      ReverseProxy__Clusters__orderservice__ClusterId: orderservice
      ReverseProxy__Clusters__orderservice__Destinations__destination1__Address: http://orderservice
      
      ReverseProxy__Clusters__paymentservice__ClusterId: paymentservice
      ReverseProxy__Clusters__paymentservice__Destinations__destination1__Address: http://paymentservice
      
      ReverseProxy__Clusters__shippingservice__ClusterId: shippingservice
      ReverseProxy__Clusters__shippingservice__Destinations__destination1__Address: http://shippingservice
      
      ReverseProxy__Clusters__userservice__ClusterId: userservice
      ReverseProxy__Clusters__userservice__Destinations__destination1__Address: http://userservice
      
      ReverseProxy__Clusters__connector__ClusterId: connector
      ReverseProxy__Clusters__connector__Destinations__destination1__Address: http://debezium:8083
      
      ReverseProxy__Clusters__commentservice__ClusterId: commentservice
      ReverseProxy__Clusters__commentservice__Destinations__destination1__Address: http://commentservice:8008
      
      ReverseProxy__Clusters__searchservice__ClusterId: searchservice
      ReverseProxy__Clusters__searchservice__Destinations__destination1__Address: http://searchservice:8009



    depends_on:
      - orderservice
      - basketservice
      - catalogservice
      - notificationservice
      - userservice
      - shippingservice
      - paymentservice
      - identityservice
      - debezium
      - grafana
      - commentservice
      - searchservice
    networks:
      cshop-network:
  
  #####################################
  #           Sqlserver service       #
  #####################################
  
  sqlserver:
    restart: always
    image: mcr.microsoft.com/mssql/server:2022-latest
    hostname: sqlserver
    container_name: sqlserver
    ports:
      - "1434:1433"
    environment:
      SA_PASSWORD: ${MSSQL_PASSWORD:-Password123@}
      ACCEPT_EULA: "Y"
      MSSQL_PID: "Standard"
      MSSQL_AGENT_ENABLED: true
    networks:
      cshop-network:
    volumes:
      - sqlserver-data:/var/opt/mssql
  #####################################
  #           Redis service           #
  #####################################
  redis:
    restart: always
    image: redis/redis-stack
    container_name: redis
    ports:
      - "6379:6379"
      - "8001:8001"
    networks:
      cshop-network:
  #####################################
  #           Debezium service         #
  #####################################
  debezium:
    restart: always
    image: quay.io/debezium/connect
    ports:
      - "8083:8083"
    environment:
      BOOTSTRAP_SERVERS: broker1:29092,broker2:29092,broker3:29092
      GROUP_ID: 1
      CONFIG_STORAGE_TOPIC: debezium_config
      OFFSET_STORAGE_TOPIC: debezium_offset
      STATUS_STORAGE_TOPIC: debezium_status
      KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
      VALUE_CONVERTER: io.debezium.converters.BinaryDataConverter
      INTERNAL_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      INTERNAL_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
    depends_on:
      - broker1
      - broker2
      - broker3
    networks:
      cshop-network:
  #####################################
  #           Mongodb service         #
  #####################################
  mongodb:
    restart: always
    image: mongo
    container_name: mongodb
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=@P@ssw0rd02
    networks:
      cshop-network:
  #####################################
  #           Smtp service         #
  #####################################
  smtp4dev:
    image: rnwood/smtp4dev:v3
    restart: always
    ports:
      - '9999:80'
      - '2525:25'
      - '143:143'
    volumes:
      - smtp4dev-data:/smtp4dev
    environment:
      ServerOptions__Urls: http://0.0.0.0:80
      ServerOptions__HostName: smtp4dev
    networks:
      cshop-network:
  #####################################
  #    Schema registry ui service     #
  #####################################
  schema-registry-ui:
    restart: always
    image: landoop/schema-registry-ui
    ports:
      - "8000:8000"
    environment:
      - SCHEMAREGISTRY_URL=http://schema-registry:8085
      - PROXY=true
    depends_on:
      - schema-registry
    networks:
      cshop-network:
  
  #####################################
  #   Schema registry service         #
  #####################################
  schema-registry:
    restart: always
    image: confluentinc/cp-schema-registry
    container_name: schema-registry
    depends_on:
      - broker1
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: PLAINTEXT://broker1:29092
      SCHEMA_REGISTRY_LISTENERS: http://schema-registry:8085
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_LOG4J_ROOT_LOGLEVEL: 'INFO'
    ports:
      - "8085:8085"
    networks:
      cshop-network:
  #####################################
  #   Zookeeper registry service      #
  #####################################
  zookeeper:
    restart: always
    image: confluentinc/cp-zookeeper
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      cshop-network:
  broker1:
    restart: always
    image: confluentinc/cp-kafka
    hostname: broker1
    container_name: broker1
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker1:29092,PLAINTEXT_HOST://broker1:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
    networks:
      cshop-network:
  broker2:
    restart: always
    image: confluentinc/cp-kafka
    hostname: broker2
    container_name: broker2
    depends_on:
      - zookeeper
    ports:
      - "9093:9093"
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker2:29092,PLAINTEXT_HOST://broker2:9093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
    networks:
      cshop-network:
  broker3:
    restart: always
    image: confluentinc/cp-kafka
    hostname: broker3
    container_name: broker3
    depends_on:
      - zookeeper
    ports:
      - "9094:9094"
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker3:29092,PLAINTEXT_HOST://broker3:9094
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
    networks:
      cshop-network:
  #####################################
  #      Kafka ui service             #
  #####################################
  kafka-ui:
    restart: always
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: broker1:29092,broker3:29092,broker2:29092
    depends_on:
      - broker1
      - broker2
      - broker3
    networks:
      cshop-network:
  #####################################
  #      Otel collector service       #
  #####################################
  otel-collector:
    restart: always
    container_name: otel-collector
    image: otel/opentelemetry-collector
    command: [ "--config=/etc/otel-collector-config.yml" ]
    volumes:
      - ./deployments/otel-collector-config.yml:/etc/otel-collector-config.yml
    ports:
      - "9464:9464"
      - "4321:4321"
    networks:
      cshop-network:
  #####################################
  #      Jaeger service               #
  #####################################
  jaeger:
    restart: always
    image: jaegertracing/all-in-one
    ports:
      - "4317:4317"
      - "16686:16686"
      - "4318:4318"
      - "14250:14250"
      - "14268:14268"
    environment:
      COLLECTOR_ZIPKIN_HTTP_PORT: 9411
    networks:
      cshop-network:
  #####################################
  #      Prometheus service           #
  #####################################
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./deployments/prometheus.yml:/etc/prometheus/prometheus.yml
    restart: always
    networks:
      cshop-network:
  #####################################
  #      Grafana service           #
  #####################################
  grafana:
    restart: always
    image: grafana/grafana
    ports:
      - "3001:3000"
    volumes:
      - grafana-data:/var/lib/grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
    networks:
      cshop-network:
  consul:
    image: consul:1.15.4
    container_name: consul
    restart: always
    ports:
      - "8500:8500"

networks:
  cshop-network:
volumes:
  grafana-data:
  smtp4dev-data:
  sqlserver-data:
  data_elasticsearch: